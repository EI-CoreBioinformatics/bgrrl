import sys
import os
import glob

TIME_CMD = " /usr/bin/time -v "
BGRRL = "/tgac/workarea/group-pb/schudomc_bact/bact-grrl"

INPUTDIR = os.path.join(os.getcwd(), "Reads")
OUTPUTDIR = os.path.join(os.getcwd(), "Analysis")

print(sys.argv)

SOFTWAREPATH = "/tgac/software/testing"
BUSCO_DATA = os.path.join(BGRRL, "data", "busco", "bacteria_odb9")

BBSUITE_DIR = os.path.join(SOFTWAREPATH, "bbmap", "37.24", "bbmap")

ADAPTERS = os.path.join(BBSUITE_DIR, "resources", "adapters.fa")

# tools
BBDUK = os.path.join(BBSUITE_DIR, "bbduk.sh")
BBNORM = os.path.join(BBSUITE_DIR, "bbnorm.sh")
FASTQC = os.path.join(SOFTWAREPATH, "fastqc", "0.11.5", "x86_64", "bin", "fastqc")

# wrappers - only used until dependencies are stable
BGRRL_WRAPPERS = os.path.join(BGRRL, "scripts", "wrappers")
EST_GSIZE = os.path.join(BGRRL_WRAPPERS, "estimate_genomesize")
SPADES_WRAPPER = os.path.join(BGRRL_WRAPPERS, "spades_wrapper")
UNICYCLER_WRAPPER = os.path.join(BGRRL_WRAPPERS, "unicycler_wrapper")
PROKKA_WRAPPER = os.path.join(BGRRL_WRAPPERS, "prokka_wrapper")
DFAST_WRAPPER = os.path.join(BGRRL_WRAPPERS, "dfast_wrapper")
QUAST_WRAPPER = os.path.join(BGRRL_WRAPPERS, "quast_wrapper")
BUSCO_WRAPPER = os.path.join(BGRRL_WRAPPERS, "busco_wrapper")

# directories
QC_OUTDIR = os.path.join(OUTPUTDIR, 'qc')
FASTQC_DIR = os.path.join(QC_OUTDIR, 'fastqc')
GSIZE_DIR = os.path.join(QC_OUTDIR, 'gsize')
ASSEMBLY_OUTDIR = os.path.join(OUTPUTDIR, 'assembly')
SPADES_OUTDIR = os.path.join(ASSEMBLY_OUTDIR, 'spades')
UNICYCLER_OUTDIR = os.path.join(ASSEMBLY_OUTDIR, 'unicycler')

ANNOTATION_OUTDIR = os.path.join(OUTPUTDIR, 'annotation')
PROKKA_OUTDIR = os.path.join(ANNOTATION_OUTDIR, 'prokka')
DFAST_OUTDIR = os.path.join(ANNOTATION_OUTDIR, 'dfast')

QA_OUTDIR = os.path.join(OUTPUTDIR, 'qa')
QUAST_OUTDIR = os.path.join(QA_OUTDIR, 'quast')
BUSCO_OUTDIR = os.path.join(QA_OUTDIR, 'busco')




INPUTFILES = dict((os.path.basename(_file).replace('_R1.fastq.gz', ''), (_file, _file.replace('_R1.fastq.gz', '_R2.fastq.gz')))
				  for _file in glob.glob(os.path.join(INPUTDIR, '*_R1.fastq.gz')))
# print(INPUTFILES)

FASTQS = [os.path.basename(_file).strip('.fastq.gz')
          for _file in glob.glob(os.path.join(INPUTDIR, '*.fastq.gz'))]

TARGETS = list()
TARGETS.extend(map(lambda s:os.path.join(FASTQC_DIR, s.replace('_R2', '_R1').replace('_R1', ''), s + '.bbduk_fastqc.html'), FASTQS))
TARGETS.extend(map(lambda s:os.path.join(GSIZE_DIR, s.replace('_R1', ''), s.replace('_R1', '.kat.hist')), (fastq for fastq in FASTQS if fastq.endswith('_R1'))))
TARGETS.extend(map(lambda s:os.path.join(QC_OUTDIR, s.replace('_R2', '_R1').replace('_R1', ''), s + '.bbnorm.fastq.gz'), FASTQS))
TARGETS.extend(map(lambda s:os.path.join(QC_OUTDIR, s.replace('_R2', '_R1').replace('_R1', ''), s.replace('_R1', '.bbnorm.pre.hist')), (fastq for fastq in FASTQS if fastq.endswith('_R1'))))
TARGETS.extend(map(lambda s:os.path.join(QC_OUTDIR, s.replace('_R2', '_R1').replace('_R1', ''), s.replace('_R1', '.bbnorm.post.hist')), (fastq for fastq in FASTQS if fastq.endswith('_R1'))))
# TARGETS.extend(map(lambda s:os.path.join(SPADES_OUTDIR, s.replace('_R1', ''), 'spades.log'), (fastq for fastq in FASTQS if fastq.endswith('_R1'))))
# TARGETS.extend(map(lambda s:os.path.join(UNICYCLER_OUTDIR, s.replace('_R1', ''), 'unicycler.log'), (fastq for fastq in FASTQS if fastq.endswith('_R1'))))
TARGETS.extend(map(lambda s:os.path.join(UNICYCLER_OUTDIR, s.replace('_R1', ''), 'assembly.fasta'), (fastq for fastq in FASTQS if fastq.endswith('_R1'))))
TARGETS.extend(map(lambda s:os.path.join(QUAST_OUTDIR, s.replace('_R1', ''), 'quast.log'), (fastq for fastq in FASTQS if fastq.endswith('_R1'))))
TARGETS.extend(map(lambda s:os.path.join(BUSCO_OUTDIR, s.replace('_R1', ''), 'run_geno', 'short_summary_geno.txt'), (fastq for fastq in FASTQS if fastq.endswith('_R1'))))

# os.path.join(BUSCO_OUTDIR, "{sample}", "run_geno", "short_summary_busco_test.txt")

# "short_summary_busco_test.txt" os.path.join(BUSCO_OUTDIR, "{sample}", "run_geno", "short_summary_busco_test.txt")

# /tgac/workarea/group-pb/CB-PPBFX-603/Analysis/assembly/unicycler/PRO1761_C6_L004/assembly.fasta


TARGETS.extend(map(lambda s:os.path.join(PROKKA_OUTDIR, s.replace('_R1', ''), s.replace('_R1', '') + '.log'), (fastq for fastq in FASTQS if fastq.endswith('_R1'))))
TARGETS.extend(map(lambda s:os.path.join(DFAST_OUTDIR, s.replace('_R1', ''), 'application.log'), (fastq for fastq in FASTQS if fastq.endswith('_R1'))))

#  os.path.join(ANNOTATION_OUTDIR, "{sample}", "{sample}.log")
# print(TARGETS)

# stolen from Dan's eipap
def get_sample_files(wc):
	return INPUTFILES[wc.sample]

rule all:
	input: TARGETS

rule bbduk_qc:
	input:
		get_sample_files
	output:
		qc_bbd_r1 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R1.bbduk.fastq.gz"),
		qc_bbd_r2 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R2.bbduk.fastq.gz"),
	params:
		in_files = lambda wildcards: "in1=" + INPUTFILES[wildcards.sample][0] + \
									 " in2=" + INPUTFILES[wildcards.sample][1]
	log:
		os.path.join(QC_OUTDIR, "log", "{sample}_qc_bbd.log")
	threads:
		8
	shell:
		TIME_CMD + " " + \
		BBDUK + " -Xmx30g t={threads} {params.in_files} out1={output.qc_bbd_r1} out2={output.qc_bbd_r2}" + \
		" ref=" + ADAPTERS + \
		" ktrim=r k=21 mink=11 hdist=2 qtrim=lr trimq=3 minlen=100 maq=20 tpe tbo &> {log}"

rule fastqc_qc:
	input:
		os.path.join(QC_OUTDIR, "{sample}", "{fastq}.bbduk.fastq.gz")
	output:
		qc_fqc = os.path.join(FASTQC_DIR, "{sample}", "{fastq}.bbduk_fastqc.html")
	params:
		outdir = os.path.join(FASTQC_DIR, "{sample}")
	log:
		os.path.join(QC_OUTDIR, "log", "{fastq}_qc_fastqc.log")
	threads:
		2
	shell:
		TIME_CMD + " " + \
		FASTQC + \
		" --extract --threads={threads} --outdir={params.outdir} {input} &> {log}"

rule bbnorm_qc:
	input:
		r1 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R1.bbduk.fastq.gz"),
		r2 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R2.bbduk.fastq.gz")
	output:
		r1 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R1.bbnorm.fastq.gz"),
		r2 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R2.bbnorm.fastq.gz"),
		prehist = os.path.join(QC_OUTDIR, "{sample}", "{sample}.bbnorm.pre.hist"),
		posthist = os.path.join(QC_OUTDIR, "{sample}", "{sample}.bbnorm.post.hist")
	log:
		os.path.join(QC_OUTDIR, "log", "{sample}_qc_bbn.log")
	threads:
		8
	shell:
		TIME_CMD + \
		" " + BBNORM + \
		" -Xmx30g t={threads} in={input.r1} in2={input.r2} out={output.r1} out2={output.r2}" + \
		" target=100 min=2 prefilter" + \  
		# ecc" + \
		" khist={output.prehist} khistout={output.posthist} &> {log}"

# sbatch -p ei-medium --mem 64GB -c 8 <(echo '#!/bin/bash -e'$'\n'"source pilon-1.22; source bowtie-2.2.9; source spades-3.8.1; source blast-2.6.0; source jre-8u92; source samtools-1.5; /tgac/software/testing/Unicycler/0.4.3_cs2/x86_64/bin/unicycler -1 data/PRO1761_A1_L004_R1.fastq.gz -2 data/PRO1761_A1_L004_R2.fastq.gz -o unicycler_test -t 8 --verbosity 3")
# will replace spades if I can get a stable installation
rule unicycler_assembly:
	input:
		r1 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R1.bbnorm.fastq.gz"),
		r2 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R2.bbnorm.fastq.gz")
	output:
		# os.path.join(UNICYCLER_OUTDIR, "{sample}", "unicycler.log")
		os.path.join(UNICYCLER_OUTDIR, "{sample}", "assembly.fasta")
	log:
		os.path.join(UNICYCLER_OUTDIR, "log", "{sample}_assembly_unicycler.log")
	params:
		outdir = lambda wildcards: os.path.join(UNICYCLER_OUTDIR, wildcards.sample)
	threads:
		8
	shell:
		UNICYCLER_WRAPPER + \
		" -1 {input.r1} -2 {input.r2} -t {threads} -o {params.outdir} &> {log}"

rule qa_busco_geno:
	input:
		scaffolds = os.path.join(UNICYCLER_OUTDIR, "{sample}", "assembly.fasta")
	output:
		os.path.join(BUSCO_OUTDIR, "{sample}", "run_geno", "short_summary_geno.txt")
	log:
		os.path.join(BUSCO_OUTDIR, "log", "run_geno", "{sample}_busco_geno.log")
	params:
		outdir = os.path.join(BUSCO_OUTDIR, "{sample}", "run_geno"),
                tmp = os.path.join(BUSCO_OUTDIR, "{sample}", "run_geno", "tmp")
	threads:
		8
	shell:
		BUSCO_WRAPPER + \
		" {params.outdir} -i {input.scaffolds} -c {threads} -m geno --force -t {params.tmp} -l " + BUSCO_DATA + " -o geno &> {log}"



rule qa_quast:
	input:
		# scaffolds = os.path.join(SPADES_OUTDIR, "{sample}", "scaffolds.fasta")
		scaffolds = os.path.join(UNICYCLER_OUTDIR, "{sample}", "assembly.fasta")
	output:
		os.path.join(QUAST_OUTDIR, "{sample}", "quast.log")
	log:
		os.path.join(QUAST_OUTDIR, "log", "{sample}_qc_quast.log")
	params:
		outdir = lambda wildcards: os.path.join(QUAST_OUTDIR, wildcards.sample)
	threads:
		8
	shell:
		QUAST_WRAPPER + \
		" -o {params.outdir} -t {threads} -L -s {input.scaffolds} &> {log}" 





'''
rule spades_assembly:
	input:
		r1 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R1.bbnorm.fastq.gz"),
		r2 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R2.bbnorm.fastq.gz")
	output:
		os.path.join(SPADES_OUTDIR, "{sample}", "spades.log")
	log:
		os.path.join(SPADES_OUTDIR, "log", "{sample}_assembly_spades.log")
	params:
		outdir = lambda wildcards: os.path.join(SPADES_OUTDIR, wildcards.sample)
	threads:
		8
	shell:
		# TIME_CMD + \
		SPADES_WRAPPER + \
                " -o {params.outdir} -1 {input.r1} -2 {input.r2} -t {threads} -m 64 &> {log}"
		# "spades.py -o {params.outdir} -1 {input.r1} -2 {input.r2} -t {threads} -m 64 &> {log}"
'''
# FOR POST-ASSEMBLY MODULES CHANGE INPUT TO CONSOLIDATED_ASSEMBLY_OUTDIR LATER ON?
rule prokka_annotation:
	input:
		# scaffolds = os.path.join(SPADES_OUTDIR, "{sample}", "scaffolds.fasta")
		scaffolds = os.path.join(UNICYCLER_OUTDIR, "{sample}", "assembly.fasta")
	output:
		os.path.join(PROKKA_OUTDIR, "{sample}", "{sample}.log")
	log:
		os.path.join(PROKKA_OUTDIR, "log", "{sample}_annotation_prokka.log")
	params:
		outdir = lambda wildcards: os.path.join(PROKKA_OUTDIR, wildcards.sample),
                prefix = lambda wildcards: wildcards.sample
	threads:
		8
	shell:
		PROKKA_WRAPPER + \
		" {params.outdir} {params.prefix} {input.scaffolds} {log} {threads}"

# /usr/bin/time -v python "${DFASTPATH}/dfast" --cpu "${NTHREADS}" --center_name "EI" -g "${INPUT}" -o "${OUTDIR}"  --force &> "${LOG}"
rule dfast_annotation:
	input:
		# scaffolds = os.path.join(SPADES_OUTDIR, "{sample}", "scaffolds.fasta")
		scaffolds = os.path.join(UNICYCLER_OUTDIR, "{sample}", "assembly.fasta")
	output:
		os.path.join(DFAST_OUTDIR, "{sample}", "application.log")
	log:
		os.path.join(DFAST_OUTDIR, "log", "{sample}_annotation_dfast.log")
	params:
		outdir = lambda wildcards: os.path.join(DFAST_OUTDIR, wildcards.sample)
	threads:
		8
	shell:
		DFAST_WRAPPER + \
		" {threads} {input.scaffolds} {params.outdir} {log}"


rule gsize_kat_hist:
	input:
		r1 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R1.bbduk.fastq.gz"),
		r2 = os.path.join(QC_OUTDIR, "{sample}", "{sample}_R2.bbduk.fastq.gz")
	output:
		qc_kat = os.path.join(GSIZE_DIR, "{sample}", "{sample}.kat.hist")
	log:
		os.path.join(QC_OUTDIR, "log", "{sample}_qc_kat.log")
	params:
		out_prefix = lambda wildcards: os.path.join(GSIZE_DIR, wildcards.sample, wildcards.sample + ".kat")
	threads:
		8
	shell:
		TIME_CMD + " bash " + EST_GSIZE + " " + \
		"{output.qc_kat} {threads} {input.r1} {input.r2} {log}"

